/*! \file */
/*******************************************
 *                                         *
 *  File auto-generated by `::safer_ffi`.  *
 *                                         *
 *  Do not manually edit this file.        *
 *                                         *
 *******************************************/

#ifndef __RUST_FFI__
#define __RUST_FFI__

#ifdef __cplusplus
extern "C" {
#endif

void test_with_no_args (void);


#include <stddef.h>
#include <stdint.h>

void test_with_one_int (
    uint8_t arg);

/** \brief
 *  [`Box`][`rust::Box`]`<[T]>` (fat pointer to a slice),
 *  but with a guaranteed `#[repr(C)]` layout.
 * 
 *  # C layout (for some given type T)
 * 
 *  ```c
 *  typedef struct {
 *      // Cannot be NULL
 *      T * ptr;
 *      size_t len;
 *  } slice_T;
 *  ```
 * 
 *  # Nullable pointer?
 * 
 *  If you want to support the above typedef, but where the `ptr` field is
 *  allowed to be `NULL` (with the contents of `len` then being undefined)
 *  use the `Option< slice_ptr<_> >` type.
 */
typedef struct {

    uint8_t * ptr;

    size_t len;

} slice_boxed_uint8_t;

void test_with_one_str (
    slice_boxed_uint8_t arg);


#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* __RUST_FFI__ */
